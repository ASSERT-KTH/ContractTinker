{
    "HighRiskFindings": {
        "Unchecked ERC20 transfers can cause lock up": [
            "_Submitted by [axic](https://twitter.com/alexberegszaszi), also found by [gpersoon](https://twitter.com/gpersoon), [pauliax](https://twitter.com/SolidityDev), [Jmukesh](https://twitter.com/MukeshJ_eth), [a_delamo](https://twitter.com/a_delamo), [s1m0](https://twitter.com/_smonica_), [cmichel](https://twitter.com/cmichelio), and [shw](https://github.com/x9453)_",
            "Some major tokens went live before ERC20 was finalized, resulting in a discrepancy whether the transfer functions should (A) return a boolean or (B) revert/fail on error. The current best practice is that they should revert, but return \u201ctrue\u201d on success. However, not every token claiming ERC20-compatibility is doing this \u2014 some only return true/false; some revert, but do not return anything on success. This is a well known issue, heavily discussed since mid-2018.",
            "Today many tools, including OpenZeppelin, offer [a wrapper for \u201csafe ERC20 transfer\u201d](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol):",
            "RealityCards is not using such a wrapper, but instead tries to ensure successful transfers via the `balancedBooks` modifier:",
            "```solidity",
            "modifier balancedBooks {",
            "    _;",
            "    // using >= not == in case anyone sends tokens direct to contract",
            "    require(",
            "        erc20.balanceOf(address(this)) >=",
            "            totalDeposits + marketBalance + totalMarketPots,",
            "        \"Books are unbalanced!\"",
            "    );",
            "}",
            "```",
            "This modifier is present on most functions, but is missing on `topupMarketBalance`:",
            "```solidity",
            "function topupMarketBalance(uint256 _amount) external override {",
            "    erc20.transferFrom(msgSender(), address(this), _amount);",
            "    if (_amount > marketBalanceDiscrepancy) {",
            "        marketBalanceDiscrepancy = 0;",
            "    } else {",
            "        marketBalanceDiscrepancy -= _amount;",
            "    }",
            "    marketBalance += _amount;",
            "}",
            "```",
            "In the case where an ERC20 token which is not reverting on failures is used, a malicious actor could call `topupMarketBalance` with a failing transfer, but also move the value of `marketBalance` above the actual holdings. After this, `deposit`, `withdrawDeposit`, `payRent`, `payout`, `sponsor`, etc. could be locked up and always failing with \u201cBooks are unbalanced\u201d.",
            "Anyone can call `topupMarketBalance` with some unrealistically large number, so that `marketBalance` does not overflow, but is above the actually helping balances. This is only possible if the underlying ERC20 used is not reverting on failures, but is returning \u201cfalse\u201d instead.",
            "**Recommended Steps**:",
            "1. Use something like OpenZeppelin\u2019s `SafeERC20`",
            "2. Set up an allow list for tokens, which are knowingly safe",
            "3. Consider a different approach to the `balancedBooks` modifier",
            "**[Splidge (Reality Cards) confirmed](https://github.com/code-423n4/2021-06-realitycards-findings/issues/2#issuecomment-860518142):**",
            " > The particular ERC20 contracts we are using don't have this issue. However for futureproofing in the event we change ERC20 tokens we will implement the recommended mitigation 1 and start using OpenZeppelin\u2019s SafeERC20.",
            "**[Splidge (Reality Cards) resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/2#issuecomment-863130135):**",
            " > Fix implemented [here](https://github.com/RealityCards/RealityCards-Contracts/commit/6b2c25bea664efe0f573d8d1b8118ecad19a47ff)"
        ],
        "Can access cards of other markets": [
            "_Submitted by [gpersoon](https://twitter.com/gpersoon)_",
            "Within `RCMarket.sol` the functions `ownerOf` and `onlyTokenOwner` do not check if the `_cardId/_token` is smaller than `numberOfCards`. So it's possible to supply a larger number and access cards of other markets.",
            "The most problematic seems to be `upgradeCard`. Here the check for `isMarketApproved` can be circumvented by trying to move the card via another market.",
            "You can still only move cards you own.",
            "```solidity",
            "// https://github.com/code-423n4/2021-06-realitycards/blob/main/contracts/RCMarket.sol#L338",
            "    function ownerOf(uint256 _cardId) public view override returns (address) {",
            "        uint256 _tokenId = _cardId + totalNftMintCount; // doesn't check if _cardId < numberOfCards",
            "        return nfthub.ownerOf(_tokenId);",
            "    }",
            "https://github.com/code-423n4/2021-06-realitycards/blob/main/contracts/RCMarket.sol#L313",
            "  modifier onlyTokenOwner(uint256 _token) {",
            "        require(msgSender() == ownerOf(_token), \"Not owner\"); // _token could be higher than numberOfCards,",
            "        _;",
            "    }",
            "function upgradeCard(uint256 _card) external onlyTokenOwner(_card) {   // _card  could be higher than numberOfCards,",
            "    _checkState(States.WITHDRAW);",
            "    require(",
            "        !factory.trapIfUnapproved() ||",
            "            factory.isMarketApproved(address(this)),   // this can be circumvented by calling the function via another market",
            "        \"Upgrade blocked\"",
            "    );",
            "    uint256 _tokenId = _card + totalNftMintCount;    // _card  could be higher than numberOfCards, thus accessing a card in another market",
            "    _transferCard(ownerOf(_card), address(this), _card); // contract becomes final resting place",
            "    nfthub.withdrawWithMetadata(_tokenId);",
            "    emit LogNftUpgraded(_card, _tokenId);",
            "}",
            "```",
            "Recommend adding the following to `ownerOf`:",
            "`require(_card < numberOfCards, \"Card does not exist\");`",
            "**[Splidge (Reality Cards) confirmed but recommended *higher* severity](https://github.com/code-423n4/2021-06-realitycards-findings/issues/11#issuecomment-860545086):**",
            " > I would assign this a higher severity level, I think it should be 3(High Risk) as this can be used to steal assets. An NFT being an asset as defined in the warden judging criteria found [here](https://docs.code4rena.com/roles/wardens/judging-criteria).",
            ">",
            "> It is planned that eventually market creation will be opened up to anyone. There are several steps along this path towards opening up market creation:",
            "> 1. only the Factory `owner` can create markets",
            "> 2. Governors will be assigned who also have the ability to create markets",
            "> 3. Anybody can be allowed to create markets by calling `changeMarketCreationGovernorsOnly`",
            "> 4. NFTs allowed to be created (or more accurately not burned on market completion) by anyone by calling `changeTrapCardsIfUnapproved`",
            ">",
            "> The key here is that even in step 3 where anybody can create a market, the market will still require Governor approval for it to be displayed in the UI and for the NFT to be allowed to be upgraded. It is here in step 3 that `upgradeCard` could be called on an approved market in order to move a card from an unapproved market.",
            "**[mcplums (Reality Cards) confirmed](https://github.com/code-423n4/2021-06-realitycards-findings/issues/11#issuecomment-864044517):**",
            " > Agreed, this indeed should have a higher severity- fantastic catch @gpersoon!!",
            "**[Splidge (Reality Cards) resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/11#issuecomment-864892792):**",
            "> Fixed [here](https://github.com/RealityCards/RealityCards-Contracts/commit/1f395f8cb415a1114cae60eb42c75c6539dfec73)",
            "> Impressed also with the simplicity of the solution.",
            "**[dmvt (Judge) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/11#issuecomment-877651728):**",
            " > Agree with the higher severity"
        ],
        "anyone can call function `sponsor`": [
            "_Submitted by [paulius.eth](https://twitter.com/SolidityDev), also found by [0xRajeev](https://twitter.com/0xRajeev), [cmichel](https://twitter.com/cmichelio), and [shw](https://github.com/x9453)_",
            "This function `sponsor` should only be called by the factory, however, it does not have any auth checks, so that means anyone can call it with an arbitrary `_sponsorAddress` address and transfer tokens from them if the allowance is > 0:",
            "```solidity",
            "    /// @notice ability to add liqudity to the pot without being able to win.",
            "    /// @dev called by Factory during market creation",
            "    /// @param _sponsorAddress the msgSender of createMarket in the Factory",
            "    function sponsor(address _sponsorAddress, uint256 _amount)",
            "        external",
            "        override",
            "    {",
            "        _sponsor(_sponsorAddress, _amount);",
            "    }",
            "```",
            "Recommend checking that the sender is a factory contract.",
            "**[Splidge (Reality Cards) confirmed](https://github.com/code-423n4/2021-06-realitycards-findings/issues/40#issuecomment-861313681):**",
            " > This is a good one!",
            "**[mcplums (Reality Cards) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/40#issuecomment-864040541):**",
            " > Yeah this is massive one!! Thanks @pauliax :)",
            "**[Splidge (Reality Cards) resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/40#issuecomment-864915074):**",
            " > fixed [here](https://github.com/RealityCards/RealityCards-Contracts/commit/a234524ea563b00c67c6ac618e426a1354b75c93)"
        ],
        "Anyone can affect deposits of any user and turn the owner of the token": [
            "_Submitted by [a_dlamo](https://twitter.com/a_delamo)_",
            "On `RCTreasury`, we have the method `collectRentUser`. This method is public, so anyone can call it using whatever user and whatever timestamp.",
            "So, calling this method using `user = XXXXX` and `_timeToCollectTo = type(uint256).max)`, would make `isForeclosed[user] = true`.",
            "See [issue page](https://github.com/code-423n4/2021-06-realitycards-findings/issues/119) for referenced code",
            "Now, we can do the same for all the users bidding for a specific token.",
            "Finally, I can become the owner of the token by just calling `newRental` and using a small price. `newRental` will iterate over all the previous bid and will remove them because there are foreclosed.",
            "Recommend that `collectRentUser` should be private and create a new public method with `onlyOrderbook` modifier.",
            "**[Splidge (Reality Cards) confirmed](https://github.com/code-423n4/2021-06-realitycards-findings/issues/119#issuecomment-863945050):**",
            " > I like this.",
            "> Although I might change the mitigation steps. I like keeping `collectRentUser` available to use, we can call it from our bot and it'll help keep user deposits updated in a timely manner for the frontend. I think I'll just add in",
            "> ```solidity",
            "> require(_timeToCollectTo <= block.timestamp, \"Can't collect future rent\")",
            "> ```",
            "**[mcplums (Reality Cards) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/119#issuecomment-864033361):**",
            " > Yeah this is a real doozie, very happy this one was spotted!! Thanks @a_delamo :)",
            "**[Splidge (Reality Cards) resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/119#issuecomment-865027036):**",
            " > Fix implemented [here](https://github.com/RealityCards/RealityCards-Contracts/commit/eb344de042217de28283c12281310b74f57a55f1)"
        ]
    },
    "MediumRiskFindings": {
        "payout doesn't fix `isForeclosed` state": [
            "_Submitted by [gpersoon](https://twitter.com/gpersoon)_",
            "The function payout of `RCTreasury.sol` doesn't undo the `isForeclosed` state of a user.",
            "This would be possible because with a payout a user will receive funds so he can lose his `isForeclosed` status.",
            "For example the function `refundUser` doesn't check and update the `isForeclosed` status in `RCTreasury` [on L429](https://github.com/code-423n4/2021-06-realitycards/blob/main/contracts/RCTreasury.sol#L429) and [line 447](https://github.com/code-423n4/2021-06-realitycards/blob/main/contracts/RCTreasury.sol#L447).",
            "Recommend checking and updating the `isForeclosed` state in the payout function.",
            "**[Splidge (Reality Cards) confirmed and suggested upgrading from 0 to 2 severity](https://github.com/code-423n4/2021-06-realitycards-findings/issues/28#issuecomment-860740403):**",
            " > The severity of this could be increased as a user might have believed that the payout would cancel their foreclosure.",
            "> This could at a push count as 2 (Medium risk)  because the \"availability could be impacted\" as in the definition [here](https://docs.code4rena.com/roles/wardens/judging-criteria). This is because the user wouldn't be allowed to place new bids without calling some other function that will cancel their foreclosure first.",
            "**[dmvt (Judge) agreed with sponsor and upgraded from 0 to 2 severity](https://github.com/code-423n4/2021-06-realitycards-findings/issues/105#issuecomment-877187804):**",
            "**[Splidge (Reality Cards) resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/28#issuecomment-864907763):**",
            " > Fixed [here](https://github.com/RealityCards/RealityCards-Contracts/commit/9f179daf5a7b0a6256feba3648456650fedf4994)"
        ],
        "Critical `uberOwner` address changes should be a two-step process": [
            "_Submitted by [0xRajeev](https://twitter.com/0xRajeev), also found by [gpersoon](https://twitter.com/gpersoon) and [a_dlamo](https://twitter.com/a_delamo)._",
            "As specified, `uberOwners` of `Factory`, `Orderbook` and `Treasury` have the highest privileges in the system because they can upgrade contracts of `market`, `Nfthub`, `order book`, `treasury`, `token` and `factory` which form the critical components of the protocol.",
            "The contracts allow for `uberOwners` to be changed to a different address from the contract owner/deployer using the `changeUberOwner()` function which is callable by the current `uberOwner`. While this function checks for zero-address, there is no validation of the new address being correct. If the current `uberOwner` incorrectly uses an invalid address for which they do not have the private key, then the system gets locked because the `uberOwner` cannot be corrected and none of the other functions that require `uberOwner` caller can be executed.",
            "Impact: The current `uberOwner` uses a non-zero but incorrect address as the new `uberOwner`. This gets set and now the system is locked and none of the `uberOwner`-only callable functions are callable. This error cannot be fixed either and will require redeployment of contracts which will mean that all existing markets have to be terminated. The system will have to be shut and restarted completely from scratch which will take a reputation hit and have a serious technical and business impact.",
            "Recommend changing the single-step change of `uberOwner` address to a two-step process where the current `uberOwner` first approves a new address as a `pendingUberOwner`. That `pendingUberOwner` has to then claim the ownership in a separate transaction which cannot be done if they do not have the correct private key. An incorrectly set `pendingUberOwner` can be reset by changing it again to the correct one who can then successfully claim it in the second step.",
            "**[Splidge (Reality Cards) marked as duplicate](https://github.com/code-423n4/2021-06-realitycards-findings/issues/105#issuecomment-863299789):**",
            " > Duplicate of #5",
            "**[dmvt (Judge) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/105#issuecomment-877187804):**",
            " > There is a very low probability coupled with a very high impact, making this a Medium risk issue in my opinion.",
            " _**Note:** Additional conversation regarding this vulnerability can be found [here](https://github.com/code-423n4/2021-06-realitycards-findings/issues/5)_"
        ],
        "Missing `balancedBooks` modifier could result in failed system insolvency detection": [
            "_Submitted by [0xRajeev](https://twitter.com/0xRajeev), also found by [gpersoon](https://twitter.com/gpersoon) and [paulius.eth](https://twitter.com/SolidityDev)_",
            "The `balancedBooks` modifier is used to \u201ccheck that funds haven't gone missing during this function call\u201d and is applied to `deposit`, `withdrawDeposit`, `payRent`, `payout` and `sponsor Treasury` functions which move funds in and out of the Treasury or adjust its market/user balances.",
            "However, this modifier is missing in the `refundUser()` and `topupMarketBalance()` functions which also perform similar actions. The impact is that any miscalculations in these functions will lead to the system becoming insolvent.",
            "Recommend adding modifier to the two functions above where it is missing.",
            "**[Splidge (Reality Cards) confirmed and resolved in a duplicate issue](https://github.com/code-423n4/2021-06-realitycards-findings/issues/23#issuecomment-864906080):**",
            "> implemented [here](https://github.com/RealityCards/RealityCards-Contracts/commit/6bb7b729fdc6f58a4b39c20ad3b24a61b5946cdf)",
            "_**Note:** Additional conversation regarding this vulnerability can be found [here](https://github.com/code-423n4/2021-06-realitycards-findings/issues/23)_"
        ],
        "`minRentalDayDivisor` can be different between markets and treasury": [
            "_Submitted by [gpersoon](https://twitter.com/gpersoon), also found by maplesyrup ([heiho1](https://github.com/heiho1) and [thisguy__](https://twitter.com/eriksal1217)) and [paulius.eth](https://twitter.com/SolidityDev)_",
            "The `minRentalDayDivisor` is defined in `RCTreasury.sol` and copied to each market.",
            "The `minRentalDayDivisor` can be updated via `setMinRental`, but then it isn't updated in the already created market.",
            "To calculate the minimum rent time, in function `withdrawDeposit` of `RCTreasury.sol`, the latest version of `minRentalDayDivisor` is used, which could be different than the values in the market.",
            "So the markets will calculate the minimum rent time different.",
            "This could lead to unexpected results",
            "```solidity",
            "function initialize(",
            "     ...",
            "        minRentalDayDivisor = treasury.minRentalDayDivisor();",
            "https://github.com/code-423n4/2021-06-realitycards/blob/main/contracts/RCTreasury.sol#L322",
            " function withdrawDeposit(uint256 _amount, bool _localWithdrawal)",
            "...",
            "  require( user[_msgSender].bidRate == 0 || block.timestamp - (user[_msgSender].lastRentalTime) > uint256(1 days) / minRentalDayDivisor, \"Too soon\");",
            "..",
            " if ( user[_msgSender].bidRate != 0 &&  user[_msgSender].bidRate / (minRentalDayDivisor) >  user[_msgSender].deposit ) {",
            "..",
            "// https://github.com/code-423n4/2021-06-realitycards/blob/main/contracts/RCTreasury.sol#L169",
            "  function setMinRental(uint256 _newDivisor) public override onlyOwner {",
            "        minRentalDayDivisor = _newDivisor;",
            "    }",
            "```",
            "Recommend either accepting or at least documenting the risk of change to code to prevent this from happening.",
            "**[Splidge (Reality Cards) acknowledged](https://github.com/code-423n4/2021-06-realitycards-findings/issues/31#issuecomment-861301786):**",
            " > Yes, This became apparent recently when we changed the `minRentalDayDivisor` during a beta test.",
            "> Ideally this value is never changed and if it is changed then it will be done very infrequently.",
            "> The main protection `minRentalDayDivisor` offers is against a DoS attack whereby an attacker gains some ownership time on a card and then will fill the orderbook with bids using sybil accounts (withdrawing almost all deposit after placing the bids), without `minRentalDayDivisor` these low value (but legitimate) bids would prevent other users from gaining ownership of the card (due to gas limits there's a limit to the rental collections we can perform) and give the attacker a greater share of the prize pot. The benefit of `minRentalDayDivisor` is that now these are zero value bids which are eligible for immediate deletion, and so there is now more of a cost to the attack which scales with the cost of the rental prices (which will closely be linked to the value of the prize pot). To this end `minRentalDayDivisor` is at it's most useful in the Treasury where it's main purpose is fulfilled in `withdrawDeposit()`, the usage in the markets is less beneficial and wasn't considered worth the extra gas usage to have the Markets fetch the updated value given the infrequency we will be changing it.",
            "> We have accepted this risk.",
            "**[dmvt (Judge) upgraded severity from 1 to 2](https://github.com/code-423n4/2021-06-realitycards-findings/issues/31#issuecomment-877275766):**",
            " > Updating to Medium risk to match the other reporting wardens: \"Possible accidental loss of funds or information due to code manipulation or bad side effects of not properly outlining a payable function\""
        ],
        "`RCFactory.createMarket()` does not enforce `_timestamps` and `_timestamps` being larger than `_timestamps`, even though proper functioning requires them to be so": [
            "_Submitted by [jvaqa](https://twitter.com/jvaqa), also found by [0xRajeev](https://twitter.com/0xRajeev), [paulius.eth](https://twitter.com/SolidityDev) and [shw](https://github.com/x9453)_",
            "`RCFactory.createMarket()` does not enforce `_timestamps`[1] and `_timestamps`[2] being larger than `_timestamps`[0], even though proper functioning requires them to be so.",
            "`IRCMarket` defines a sequence of events that each market should progress through sequentially, CLOSED, OPEN, LOCKED, WITHDRAW. ([1](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/interfaces/IRCMarket.sol#L7))",
            "The comments explicitly state that `_incrementState()` should be called \"thrice\" ([2](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/RCMarket.sol#L1093))",
            "However, it is possible to create a market where these events do not occur sequentially.",
            "You can create a market where the `marketOpeningTime` is later than the `marketLockingTime` and `oracleResolutionTime`.",
            "This is because although `RCFactory` checks to ensure that `_timestamps[2]` is greater than `_timestamps[1]`, it does not check to ensure that `_timestamps[1]` is greater than `_timestamps[0]` ([3](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/RCFactory.sol#L539))",
            "This is also because although RCFactory checks to ensure that `_timestamps[0]` is equal to or greater than `block.timestamp`, it makes no check for a minimum value for `_timestamps[1]` or `_timestamps[2]`, or a relative check between the value of `_timestamps[0]` and `_timestamps[1]`. ([4](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/RCFactory.sol#L521))",
            "Thus, you can create a market where the `marketLockingTime` and the `oracleResolutionTime` occur before the `marketOpeningTime`.",
            "When calling `RCFactory.createMarket()`, Alice can supply 0 as the argument for `_timestamps[1]` and `_timestamps[2]`, and any value equal to or greater than `block.timestamp` for `_timestamps[0]` ([5](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/RCFactory.sol#L468))",
            "Recommend adding the following check to `RCFactory.createMarket()`:",
            "```solidity",
            "require(",
            "    _timestamps[0] < _timestamps[1],",
            "    \"market must begin before market can lock\"",
            ");",
            "```",
            "**[Splidge (Reality Cards) confirmed and resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/61#issuecomment-864930732):**",
            " > Implemented [here](https://github.com/RealityCards/RealityCards-Contracts/commit/e47c6d845360166620dc014657d95d7180185c77)"
        ],
        "Possible locked-ether (funds) Issue in `RCOrderbook.sol`": [
            "_Submitted by maplesyrup ([heiho1](https://github.com/heiho1) and [thisguy__](https://twitter.com/eriksal1217))_",
            "When running the analyzer code, the following functions were found in `RCOrderbook.sol` to possibly lock funds due to it being a payable function with no withdraw function associated. See [Issue #43](https://github.com/code-423n4/2021-06-realitycards-findings/issues/43) for more details.",
            "**[Splidge (Reality Cards) confirmed initially and then disputed](https://github.com/code-423n4/2021-06-realitycards-findings/issues/43#issuecomment-861332540):**",
            " > I initially confirmed this because we aren't using the native currency on Matic/Polygon. However I think this should be disputed mainly because this function is used to call other functions which might be payable, although I admit currently we don't have payable functions, we might add them in the future.",
            "> This library is used across all our contracts, had we put a payable function in the Treasury for instance, would this be considered a flaw to have this same library imported into the Orderbook?",
            "**[Splidge (Reality Cards) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/43#issuecomment-861566988):**",
            " > Note that the duplicate issue #51 was submitted by the same user.",
            "**[dmvt (Judge) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/43#issuecomment-877652563):**",
            " > Agree with the sponsor's explanation, but the issue exists regardless. Adding a way to retrieve locked funds would mitigate the issue."
        ],
        "`maxSumOfPrices` check is broken": [
            "_Submitted by [0xRajeev](https://twitter.com/0xRajeev)_",
            "`rentAllCards()` requires the sender to specify a `_maxSumOfPrices` parameter which specifies \u201climit to the sum of the bids to place\u201d as specified in the Natspec @param comment. This is apparently for front-run protection.",
            "However, this function parameter constraint for `_maxSumOfPrices` is broken in the function implementation which leads to the total number of bids placed greater than the `_maxSumOfPrices` specified.",
            "The impact of this is that the user may not have sufficient deposited, be foreclosed upon and/or impacted on other bids/markets.",
            "Scenario: Assume two cards for a market with current winning rentals of 50 each. `_maxSumofPrices` = 101 passes check on L643 but then the forced 10% increase on L650 (assuming sender is not the owner of either card) causes `newRentals` to be called with 55 for each card thus totalling to 110 which is > 101 as requested by the user.",
            "Recommend modifing the max sum of prices check logic to consider the 10% increase scenarios. Document and suggest the max sum of prices for the user in the UI based on the card prices and 10% requirement depending on card ownership.",
            "**[Splidge (Reality Cards) confirmed and resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/87#issuecomment-864947965):**",
            " > fixed [here](https://github.com/RealityCards/RealityCards-Contracts/commit/10dfc77977f19fd4c233eb294ebc566526be9546)"
        ],
        "Flows can bypass market and global pause": [
            "_Submitted by [0xRajeev](https://twitter.com/0xRajeev)_",
            "Ability to pause all token transfers and all state changes for contracts is a \u201cguarded-launch\u201d best-practice for emergency situations for newly launched projects. The project implements this using a `marketsPaused` flag per market and a `globalPause` flag across all markets.",
            "While these prevent renting of cards in a specific market and deposit/withdraw/rent cards across all markets, there are still public/external functions that are unguarded by these flags which can affect contract state in paused scenarios that will make it hard/impossible to recover correctly from the emergency pause.",
            "Examples include`topupMarketBalance()` and `refundUser()` in `Treasury` can be triggered even in a `globalPause` scenario. There could be other function flows where it is not obvious that market/global pausing is enabled because it is enforced in one of the functions called deep within the code within one of the conditionals.",
            "The impact is that markets get paused but the contracts cannot be restarted because of state changes affected during the pause via unguarded external/public functions.",
            "Recommend applying `marketPaused` and `globalPause` check clearly in the beginning of all public/external functions which move tokens/funds in/out or change contract state in any way. Also, Validate all possible control flows to check that market/global pausing works in all scenarios and applies to all contract state and not specific functionalities.",
            "**[Splidge (Reality Cards) disputed and disagreed with severity](https://github.com/code-423n4/2021-06-realitycards-findings/issues/89#issuecomment-863985253):**",
            " > `marketPause` is [declared ](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/RCTreasury.sol#L79)as only limiting rentals in a specific market.",
            "> ``globalPause`` is [declared ](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/RCTreasury.sol#L77)as stopping deposits, withdraws and rentals across all markets.",
            "> Therefore they are functioning as intended.",
            ">",
            "> Also, the example of `refundUser()` is not true, it will fail in a ``globalPause`` because it is only called by markets during a rent collection and a rent collection requires the calling of `payout` which is restricted by `globalPause`.",
            "**[dmvt (Judge) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/89#issuecomment-877668587):**",
            " > `topupMarketBalance` does appear to be a deposit of sorts. I think the warden's take on the issue is valid and sponsor should seriously consider looking closer at the potential side effects of not fully pausing intentional transfer functions."
        ],
        "Deposit whitelist enforced on `msg.sender` instead of user": [
            "_Submitted by [0xRajeev](https://twitter.com/0xRajeev)_",
            "The Treasury `deposit()` function credits amount to the user address in parameter instead of the `msgSender()` function that is actually making the deposit with the rationale (as explained in the Natspec comment) being that this may be called via contract or L1-L2 bot.",
            "However, the deposit whitelist should ideally be enforced on the `_user` address. If `msgSender()` is blacklisted, user address can still `deposit()` from another whitelisted `msgSender()` address while retaining the user address that is used for leader boards and NFTs.",
            "The impact of this is that even if the user misbehaves in interactions with the system (e.g. trolls, spams) and their corresponding `msgSender()` is removed from the whitelist. The user can continue to deposit into the system via another whitelisted `msgSender()` without any impact to leader boards or NFTs.",
            "Recommend using whitelist on user address instead of `msgSender()`.",
            "**[Splidge (Reality Cards) disputed and disagreed with severity](https://github.com/code-423n4/2021-06-realitycards-findings/issues/107#issuecomment-864043844):**",
            " > It is stated that the whitelist will \"only allow certain addresses to deposit\" [here ](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/RCTreasury.sol#L70)and that toggleWhitelist() allows an address to deposit [here](https://github.com/code-423n4/2021-06-realitycards/blob/86a816abb058cc0ed9b6f5c4a8ad146f22b8034c/contracts/RCTreasury.sol#L204).",
            ">",
            "> I think that the whitelist is performing as intended, but thanks for this issue report as this could easily have been a larger issue.",
            ">",
            "> We only plan to use the whitelist as a very rudimentary barrier just for the initial launch. I think that only allowing certain addresses to deposit is sufficient for now. Maybe if time allows I'll make the changes but changing the whitelist to allow the `_user` instead of the `msgSender()` would also block contracts and layer1->layer2 bot, so there'd need to be exceptions made for them. I'd rather not play about with sensitive functions at the last minute when we aren't going to be using the whitelist much anyway.",
            "**[dmvt (Judge) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/107#issuecomment-877673092):**",
            " > Warden makes a good point. This could allow griefing of other parts of the system. If the barrier winds up being needed longer than expected or users act in unexpected ways, sponsor may wind up wishing they had reconsidered addressing this. Obviously, sponsor is free to ignore, but the issue seems to be a valid one with significant potential impact."
        ],
        "Missing call to `removeOldBids` may affect foreclosure": [
            "_Submitted by [0xRajeev](https://twitter.com/0xRajeev)_",
            "`Orderbook.removeBids()` as commented:",
            "```",
            "///remove bids in closed markets for a given user",
            "///this can reduce the users `bidRate` and chance to foreclose",
            "```",
            "`removeOldBids()` is performed currently in `Market.newRental()` and `Treasury.deposit()` to  \u201cdo some cleaning up, it might help cancel their foreclosure\u201d as commented. However, this is missing in the `withdrawDeposit()` function where the need is the most because user is removing deposit which may lead to foreclosure and is even commented as being useful on L356.",
            "The impact is that, if we do not remove closed market bids during withdrawDeposit, the closed market bids still get accounted in user's `bidRate` in the conditional on L357 and therefore do not prevent the foreclosure in `withdrawDeposit` that may happen in L357-L367. User may get foreclosed because of mis-accounted closed-market bids in the order book.",
            "Recommend adding call to `removeOldBids()` on L355 of `withdrawDeposit()` of Treasury.",
            "**[Splidge (Reality Cards) confirmed but disagreed with severity and then resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/109#issuecomment-864960734):**",
            " > This was intentionally left out in an older version of the contracts because of the way `withdrawDeposit` worked before we had the per-user rent collection.",
            "> Added it back in again [here](https://github.com/RealityCards/RealityCards-Contracts/commit/93e80368cc1d5f0ea6b397c5733af40ee7100a0b)."
        ],
        "NFT Hub implementation deviates from ERC721 for transfer functions": [
            "_Submitted by [0xRajeev](https://twitter.com/0xRajeev)_",
            "ERC721 standard and implementation allows the use of approved addresses to affect transfers besides the token owners. However, the L2 NFT Hub implementation deviates from ERC721 by ignoring the presence of any approvers in the overriding function implementations of `transferFrom()` and `safeTransferFrom()`.",
            "The impact is that the system interactions with NFT platforms may not work if they expect ERC721 adherence. Users who interact via approved addresses will see their transfers failing for their approved addresses.",
            "Given that the key value proposition of this project is the use of NFTs, the expectation will be that it is fully compatible with ERC721.",
            "Recommend adding support for approval in NFT transfers.",
            "**[mcplums (Reality Cards) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/118#issuecomment-862995040):**",
            " > This is a nice one, I see no reason why we can't implement this",
            "**[Splidge (Reality Cards) confirmed](https://github.com/code-423n4/2021-06-realitycards-findings/issues/118#issuecomment-863895939):**",
            " > Yes, we will need to add this, although we will need to override the approvals until the market has locked and the cards true owner is discovered.",
            "**[Splidge (Reality Cards) resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/118#issuecomment-865018341):**",
            " > I've changed from overriding specific functions which could be dangerous if we were to upgrade to an OpenZeppelin implementation that had alternative transfer functions.",
            "> Now we use the `_beforeTokenTransfer` hook and check that only the factory or the market can do a transfer before the market has entered the withdraw state. Implemented [here](https://github.com/RealityCards/RealityCards-Contracts/commit/a628ac8e0132f7ca4159980f791ae820100c0888)"
        ],
        "`RCNftHubL2.safeTransferFrom` not according to spec": [
            "_Submitted by [cmichel](https://twitter.com/cmichelio), also found by [0xRajeev](https://twitter.com/0xRajeev)_",
            "The `RCNftHubL2.safeTransferFrom` function does not correctly implement the ERC721 spec:",
            "> When using `safeTransferFrom`, the token contract checks to see that the receiver is an IERC721Receiver, which implies that it knows how to handle ERC721 tokens. [ERC721](https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#IERC721-safeTransferFrom)",
            "This check is not implemented, it just drops the `_data` argument.",
            "Contracts that don't know how to handle ERC721 tokens (are not an `IERC721Receiver`) can accept them but they should not when using `safeTransferFrom` according to spec.",
            "Recommend Implementing the `IERC721Receiver` check in `safeTransferFrom`.",
            "**[Splidge (Reality Cards) confirmed and resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/160#issuecomment-865141409):**",
            " > This has been fixed while working on issue #118",
            "> commit [here](https://github.com/RealityCards/RealityCards-Contracts/commit/a628ac8e0132f7ca4159980f791ae820100c0888)"
        ],
        "Wrong calculation on `_collectRentAction`": [
            "_Submitted by [a_dlamo](https://twitter.com/a_delamo)_",
            "The method `_collectRentAction` contains the [following code](https://github.com/code-423n4/2021-06-realitycards-findings/issues/122#issue-922787380):",
            "in case 6, it is doing:",
            "```solidity",
            "_refundTime = block.timestamp - marketLockingTime;",
            "```",
            "instead of:",
            " ```solidity",
            " _refundTime = _timeUserForeclosed - marketLockingTime;",
            " ```",
            "This could lead to funds being drained by the miscalculation.",
            "**[mcplums (Reality Cards) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/122#issuecomment-864032806):**",
            " > This is a really great find!!",
            "**[Splidge (Reality Cards) confirmed and resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/122#issuecomment-865026713):**",
            " > Fix implemented [here](https://github.com/RealityCards/RealityCards-Contracts/commit/457cc782c196e34b3b9d95a2d2c7b52ee6c17f2d)"
        ],
        "Market-specific pause is not checked for sponsor": [
            "_Submitted by [cmichel](https://twitter.com/cmichelio)_",
            "The treasury only checks its `globalPause` field but does not check its market-specific `marketPaused` field for `Treasury.sponsor`.",
            "A paused market contract can therefore still deposit as a sponsor using `Market.sponsor` and result in the market-specific pause not work correctly.",
            "Recommend adding checks for `marketPaused` in the Treasury for `sponsor`.",
            "**[mcplums (Reality Cards) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/145#issuecomment-862980785):**",
            " > I don't think this is important but I guess it can't hurt to block sponsorship if paused",
            "**[Splidge (Reality Cards) confirmed but disagreed with severity](https://github.com/code-423n4/2021-06-realitycards-findings/issues/145#issuecomment-863178772):**",
            " > I'm not sure why this is a severity 2? Maybe it should be lower.",
            "> Sponsoring a market, whether paused or not, doesn't come with an expectation to receive the funds back. So assets are not at risk here.",
            "**[Splidge (Reality Cards) resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/145#issuecomment-865102061):**",
            " > There have been changes made to `marketPaused` and how markets are created due to other issues that have been found. By default markets are now created in a paused state and it'd be useful to be able to sponsor them before the governors approve them. It's a nice thing for the sponsorship to be in place before anybody interacts with the contract.",
            "> I have however made changes such that is the market pause is ever turned on by the Treasury owner then the sponsor function will revert.",
            "> Changes [here](https://github.com/RealityCards/RealityCards-Contracts/commit/4f7ab8074405058bf2bb24966886f3e0019e9208)"
        ],
        "Deposits don't work with fee-on transfer tokens": [
            "_Submitted by [cmichel](https://twitter.com/cmichelio)_",
            "There are ERC20 tokens that may make certain customizations to their ERC20 contracts.",
            "One type of these tokens is deflationary tokens that charge a certain fee for every `transfer()` or `transferFrom()`.",
            "The `deposit()` function will introduce unexpected balance inconsistencies when comparing internal asset records with external ERC20 token contracts.",
            "Recommend measuring the asset change right before and after the asset-transferring routines as a possible mitigation.",
            "**[mcplums (Reality Cards) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/152#issuecomment-862970135):**",
            " > I think balancedBooks modifier should handle this?",
            ">",
            "> Of course it means we are unable to use such tokens, but that is ok",
            "**[Splidge (Reality Cards) disputed](https://github.com/code-423n4/2021-06-realitycards-findings/issues/152#issuecomment-863172608)",
            " > oh, trying the same one again..? \ud83d\ude01",
            "> https://github.com/code-423n4/2021-05-88mph-findings/issues/16",
            ">",
            "> I'll fight this one though, I'd argue that we are using ERC20 tokens and according to the ERC20 [spec](https://github.com/code-423n4/2021-05-88mph-findings/issues/16) for transferFrom:",
            ">",
            "> > Transfers `_value` amount of tokens from address `_from` to address `_to`",
            ">",
            "> A deflationary token therefore isn't compliant to ERC20 as it doesn't transfer the full `_value` and so it isn't what we are planning to use and not relevant here.",
            "**[dmvt (Judge) commented](https://github.com/code-423n4/2021-06-realitycards-findings/issues/152#issuecomment-877676755):**",
            " > If you plan not to support these tokens it should be very clearly documented. Keep in mind that \"we don't support that\" still has massive impact on the users involved. See: imBTC / ERC777 on Uniswap v1. The issue is valid and should stand in the audit report, in part so that future users see it."
        ],
        "Deposits can be denied by abusing `maxContractBalance`": [
            "_Submitted by [cmichel](https://twitter.com/cmichelio)_",
            "The treasury implements a max contract balance check in the `deposit` function:",
            "```solidity",
            "require(",
            "    (erc20.balanceOf(address(this)) + _amount) <= maxContractBalance,",
            "    \"Limit hit\"",
            ");",
            "```",
            "A whale can stop anyone from depositing by front-running a user's deposit with a deposit that pushes the contract balance to the `maxContractBalance` limit first. The user's deposit will then fail in the check. Afterwards, the whale can withdraw again.",
            "> This is not only restricted to whales, miners/users can do the same using same-block cross-transaction flashloans and submitting a `(attacker deposit, user deposit, attacker withdraw)` flashbundle to a miner. Possibilities like this will only become more prevalent in the future.",
            "Any users can be blocked from depositing which prevents them from renting cards.",
            "This allows an attacker to manipulate the outcome of a market in their favor by strategically preventing other competitors to bid on their cards (causing forfeiture due to a low deposit balance).",
            "Recommend removing the contract limit or at least set the limit very high if it keeps happening.",
            "**[mcplums (Reality Cards) acknowledged](https://github.com/code-423n4/2021-06-realitycards-findings/issues/153#issuecomment-862967304):**",
            " > This is a good one- but I don't think we need to make any changes to the contract. We can use it as originally intended, then if it is exploited as above, we can switch to only setting the variable to 0 or maxuint256. So it just acts as a toggle on whether deposits are allowed."
        ],
        "Function `foreclosureTimeUser` returns a shorter user's foreclosure time than expected": [
            "_Submitted by [shw](https://github.com/x9453)_",
            "The function `foreclosureTimeUser` of `RCTreasury` underestimates the user's foreclosure time if the current time is not the user's last rent calculation time. The underestimation of the foreclosure time could cause wrong results when determining the new owner of the card.",
            "The variable `timeLeftOfDeposit` at line 668 is calculated based on `depositAbleToWithdraw(_user)`, the user's deposit minus the rent from the last rent calculation to the current time. Thus, the variable `timeLeftOfDeposit` indicates the time left of deposit, starting from now. However, at line 672, the `foreclosureTimeWithoutNewCard` is calculated by `timeLeftOfDeposit` plus the user's last rent calculation time instead of the current time. As a result, the user's foreclosure time is reduced. From another perspective, the rent between the last rent calculation time and the current time is counted twice.",
            "Recommend changing `depositAbleToWithdraw(_user)` at line 669 to `user[_user].deposit`. Or, change `user[_user].lastRentCalc` at both line 672 and 678 to `block.timestamp`.",
            "**[Splidge (Reality Cards) confirmed and resolved](https://github.com/code-423n4/2021-06-realitycards-findings/issues/171#issuecomment-865843473):**",
            " > phew, this was one to wrap your head around.",
            "> I went with the first recommended mitigation because I believe the second one could causes issues if the user had already foreclosed, `depositAbleToWithdraw` would return 0 and so `foreclosureTimeWithoutNewCard` would incorrectly show as `block.timestamp`. Fix implemented [here](https://github.com/RealityCards/RealityCards-Contracts/commit/a160893b17633491c064a6bf05ced72df15390fd)",
            ">",
            "> Really nice spot this one. Many thanks for such an in-depth look into the maths."
        ]
    }
}