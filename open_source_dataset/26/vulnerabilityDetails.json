{
    "HighRiskFindings": {
        "`findNewOwner` edgecase": [
            "_Submitted by gpersoon_",
            "In the function `findNewOwner` of `RCOrderbook`, as loop is done which included the check  `_loopCounter < maxDeletions`",
            "Afterwards, a check is done for  \"(_loopCounter != maxDeletions)\" to determine if the processing is finished.",
            "If `_loopCounter == maxDeletions` then the conclusion is that it isn't finished yet.",
            "However, there is the edgecase that the processing might just be finished at the same time as `_loopCounter == maxDeletions`.",
            "You can see this the best if you assume `maxDeletions==1`, in that case it will never draw the conclusion it is finished.",
            "Of course having `maxDeletions==1` is very unlikely in practice.",
            "```solidity",
            "// https://github.com/code-423n4/2021-08-realitycards/blob/main/contracts/RCOrderbook.sol#L549",
            " function findNewOwner(uint256 _card, uint256 _timeOwnershipChanged)  external  override  onlyMarkets  {",
            "...",
            "    // delete current owner",
            "    do {",
            "        _newPrice = _removeBidFromOrderbookIgnoreOwner( _head.next, _market, _card );",
            "        _loopCounter++;             // delete next bid if foreclosed",
            "    } while (    treasury.foreclosureTimeUser( _head.next, _newPrice,  _timeOwnershipChanged ) <  minimumTimeToOwnTo &&",
            "            _loopCounter < maxDeletions );",
            "    if (_loopCounter != maxDeletions) {   // the old owner is dead, long live the new owner",
            "        _newOwner = ....",
            "        ...",
            "    } else {",
            "        // we hit the limit, save the old owner, we'll try again next time",
            "        ...",
            "    }",
            "}",
            "```",
            "Recommend using a different way to determine that the processing is done. This could save some gas.",
            "Note: the additional check also costs gas, so you have to verify the end result.",
            "Perhaps in `setDeletionLimit`, doublecheck that `_deletionLimit` > 1.",
            "**[Splidge (Reality Cards) confirmed and disagreed with severity](https://github.com/code-423n4/2021-08-realitycards-findings/issues/27#issuecomment-905499584):**",
            " > oh wow, this is actually a really big problem. It's easier to see it if `maxDeletions` is 1 but it exists with any size of `maxDeletions`.",
            "> Whenever we find a valid owner on the final iteration of the loop the if statement will simply check if it was the final loop. That valid owner is then assumed to be invalid and saved for the next transaction to try and find a new owner. When that next transaction happens the valid owner is immediately deleted and not given any ownership of the card at all.",
            "> I think this just falls short of 3 (High risk) because I don't think it'd be possible for an attacker to engineer the situation to have a particular user deleted without ownership. But I believe this would count as 2 (Med risk) because the protocol [\"availability could be impacted\"](https://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr) for the user that is deleted.",
            "**[Splidge (Reality Cards) commented](https://github.com/code-423n4/2021-08-realitycards-findings/issues/27#issuecomment-905523120):**",
            " > I have since thought of an attack that could have used this and might raise it to 3 (High risk).",
            ">",
            "> Due to the difficultly of monitoring which cards you own all the time a valid strategy which some users employ is to bid high enough to scare off other users (usually bidding significantly beyond the 10% minimum increase). Suppose Alice employs this strategy by bidding \\$100 on a card that was previously only \\$10.",
            "> Mal (our attacker) wishes to rent the card but wants to pay less than \\$100. Mal could use Sybil accounts to place `maxDeletions - 1` bids all for the minimum rental duration (only funding the accounts for the minimum duration). Mal would then need to wait for the minimum duration of all these bids to expire, `(maxDeletions - 1 ) * minimumRentalDuration`",
            "> Once this has completed Mal can place a bid at \\$11, this will trigger a rent collection which will attempt to `findNewOwner`, Alice being the user that was found on the last iteration of the loop would be considered as invalid. There will not be a change of ownership or any events emitted about this until the next rent collection is triggered.",
            "> This means that the UI would still consider Alice to be the owner of card (Mals' Sybil bids having had `LogRemoveFromOrderbook` and `LogUserForeclosed` events emitted) and other users might not consider trying to outbid this, whereas actually Mal is accruing time at a significantly cheaper rate.",
            ">",
            "> Thinking about it, this doesn't really even need Alice at all, Mal could have placed all the higher bids to simultaneously scare off other users while renting at a lower price.",
            ">",
            "> I think the fix is relatively simple, by checking if we found a valid user OR hit the deletion limit we can make it so that we don't skip any bids. This would then leave Alice (or Mal in the other version) correctly having to pay for the time at the higher price.",
            "**[0xean (judge) commented](https://github.com/code-423n4/2021-08-realitycards-findings/issues/27#issuecomment-911673904):**",
            " > upgrading based on sponsors analysis",
            "**[Splidge (Reality Cards) patched](https://github.com/code-423n4/2021-08-realitycards-findings/issues/27#issuecomment-914180653):**",
            " > Fixed [here](https://github.com/RealityCards/RealityCards-Contracts/commit/9f81f683ea0d2ab41ab91ba9188baf594012c295)"
        ],
        "`UberOwner` has too much power": [
            "_Submitted by tensors_",
            "The Uber Owner has too much power within the system. This makes the protocol closer to a centralized prediction market whose rules are determined by the Uber Owner. See issue page for referenced code",
            "The above functions can be used by the Uber Owner to completely change the functionality of the system.",
            "This goes well beyond simple setting new constants and fees, the Uber Owner can basically reprogram how the entire protocol works. Not to mention if the address falls into the wrong hands.",
            "Recommend limiting the permission of the Uber Owner to something more manageable and trustable. If upgrades to underlying contracts are required they can be done through a proxy instead, in the standard way.",
            "**[mcplums (Reality Cards) disputed](https://github.com/code-423n4/2021-08-realitycards-findings/issues/74#issuecomment-906225388):**",
            " > This is a subjective opinion- there is always going to be a compromise between decentralisation and the ability to respond to potential problems. The latter is especially important with a protocol that is so new.",
            ">",
            "> There is no correct answer here, but the current abilities of `uberOwner` were decided after a lot of thought and are in line with other DeFi protocols.",
            "**[Splidge (Reality Cards) commented](https://github.com/code-423n4/2021-08-realitycards-findings/issues/74#issuecomment-906236023):**",
            " > I'd just like to add that we did recognize the power of the UberOwner which is why it is separated from the Owner specifically so that we can add additional security to it (in the form of a multisig) and so that we can relinquish this control at the appropriate time.",
            "> This was covered in the [readme](https://github.com/code-423n4/2021-08-realitycards#mortar_board-governance-mortar_board).",
            "> And also [commented ](https://github.com/code-423n4/2021-08-realitycards/blob/39d711fdd762c32378abf50dc56ec51a21592917/contracts/RCTreasury.sol#L288-L291)in the code.",
            "**[0xean (judge) commented](https://github.com/code-423n4/2021-08-realitycards-findings/issues/74#issuecomment-911717998):**",
            " > I think the warden(s) have a valid point here. This is an incredible amount of power for a single address to yield over the protocol, even if backed by a multi-sig.",
            ">",
            "> Is it no an option to 1) pause all activity, and unlock all funds allowing users to withdraw their own funds or 2) pause all activity besides withdraws and implement a time delay between that and the \"rug pull\" function being called.",
            ">",
            "> The readme also states",
            ">",
            "> ```Alternatively we may wish for this to be a multisig but the normal owner to not be, for convenience.```",
            ">",
            "> Without a multisig, I believe this absolutely qualifies as a high severity issue as a compromise of a single end user address compromises the entire system, with a multisig it potentially lowers the severity down to a medium, but its still a risk that is worth highlighting in the system and for the sponsor to scrutinize if there are indeed other mitigation paths that could be taken."
        ]
    },
    "MediumRiskFindings": {
        "Uninitialized Variable `marketWhitelist` in `RCTreasury.sol`": [
            "_Submitted by leastwood, also found by 0xsanson, gpersoon, hickuphh3 and JMukesh_",
            "The variable, `marketWhitelist`, is never initialized in the contract `RCTreasury.sol`. As a result, the function `marketWhitelistCheck()`  does not perform a proper check on whitelisted users for a restricted market. Additionally, the function will always return `true`, even if a market wishes to restrict its users to a specific role.",
            "The initial state variable is defined in [`RCTreasury.sol` L75](https://github.com/code-423n4/2021-08-realitycards/blob/main/contracts/RCTreasury.sol#L75).",
            "The state variable `marketWhitelist` is accessed in the function `RCTreasury.marketWhitelistCheck()` at [`RCTreasury.sol` L269-L281](https://github.com/code-423n4/2021-08-realitycards/blob/main/contracts/RCTreasury.sol#L269-L281).",
            "The function `RCTreasury.marketWhitelistCheck()` is called in `RCMarket.newRental()` at [`RCMarket.sol` L758-L761](https://github.com/code-423n4/2021-08-realitycards/blob/main/contracts/RCMarket.sol#L758-L761). The comment indicates that there should be some ability to restrict certain markets to specific whitelists, however, there are no methods in `RCTreasury` that allow a market creator to enable this functionality.",
            "Recommend ensuring this behavior is intended. If this is not the case, consider adding a function that enables a market creator to restrict their market to a specific role by whitelisting users.",
            "**[Splidge (Reality Cards) confirmed and disagreed with severity](https://github.com/code-423n4/2021-08-realitycards-findings/issues/18#issuecomment-905413207):**",
            " > I think the severity could be double-checked on this one.",
            "> It's a close one but I'd be tempted to put it under 1 (low risk) as a \"Function incorrect to spec\".",
            "> Regardless, this will be fixed.",
            ">",
            "> Edit: I notice the duplicates were both marked as 1 (low risk).",
            "**[0xean (judge) commented](https://github.com/code-423n4/2021-08-realitycards-findings/issues/18#issuecomment-910962066):**",
            " > based on \" but the function of the protocol or its availability could be impacted\" in the code4 docs, I am going to agree with warden and leave this as a 2.  The function of the protocol is certainly impacted in a case where the whitelist if not working correctly.",
            "**[Splidge (Reality Cards) patched](https://github.com/code-423n4/2021-08-realitycards-findings/issues/18#issuecomment-914175471):**",
            " > Fixed [here](https://github.com/RealityCards/RealityCards-Contracts/commit/1515f87e97be1ed09316340e19caea5c12242c17)"
        ],
        "Parameter updates not propagated": [
            "_Submitted by gpersoon, also found by cmichel_",
            "There are several functions to update parameters. However these parameters are only updated on the top level and not propagated to the other contracts. This could lead to various unpredictable results.",
            "Examples are:",
            "- `setNftHubAddress` of `RCFactory`",
            "- `setOrderbookAddress` of `RCFactory`",
            "- `setLeaderboardAddress` of `RCFactory`",
            "- `setMinRental` of `RCTreasury`",
            "```solidity",
            "// https://github.com/code-423n4/2021-08-realitycards/blob/main/contracts/RCFactory.sol#L586",
            "function setNftHubAddress(IRCNftHubL2 _newAddress) external override onlyUberOwner {",
            "    require(address(_newAddress) != address(0), \"Must set Address\");",
            "    nfthub = _newAddress;",
            "}",
            "function setOrderbookAddress(IRCOrderbook _newOrderbook) external override {",
            "    require( treasury.checkPermission(TREASURY, msgSender()), \"Not approved\" );",
            "    orderbook = _newOrderbook;",
            "}",
            "function setLeaderboardAddress(IRCLeaderboard _newLeaderboard) external override {",
            "    require( treasury.checkPermission(TREASURY, msgSender()), \"Not approved\");",
            "    leaderboard = _newLeaderboard;",
            "}",
            "//https://github.com/code-423n4/2021-08-realitycards/blob/main/contracts/RCTreasury.sol#L188",
            "function setMinRental(uint256 _newDivisor) public override onlyRole(OWNER) {",
            "    minRentalDayDivisor = _newDivisor;",
            "}",
            "```",
            "Recommend implementing a way to notify the underlying contracts of the updates.",
            "**[Splidge (Reality Cards) acknowledged](https://github.com/code-423n4/2021-08-realitycards-findings/issues/30#issuecomment-904726786):**",
            " > We have come to realise that it is very unlikely we will be able to change certain contracts once they are in-use, the exception being the market where a new reference could be deployed.",
            "> In practice we do use `setNftHubAddress` shortly after deploying new contracts, this is so that we can continue to use an existing NFT hub that has already been put through Matic Mintable Asset mapping, but changing this while a market is active would cause problems.",
            "> While we accept that changing these parameters on active contracts may be troublesome we will not be making changes at this time, partly because it's useful to be able to change these before the contracts are in use but also due to the potential risk of introducing new problems at this stage in the project."
        ],
        "Deposits don't work with fee-on transfer tokens": [
            "_Submitted by cmichel_",
            "There are ERC20 tokens that may make certain customizations to their ERC20 contracts.",
            "One type of these tokens is deflationary tokens that charge a certain fee for every `transfer()` or `transferFrom()`.",
            "Others are rebasing tokens that increase in value over time like Aave's aTokens (`balanceOf` changes over time).",
            "The `RCTreasury.deposit()` function will credit more deposits than the contract actually received:",
            "```solidity",
            "erc20.safeTransferFrom(msgSender(), address(this), _amount);",
            "user[_user].deposit += SafeCast.toUint128(_amount);",
            "```",
            "Recommend ensuring that the `erc20` token does not implement any customizations.",
            "Alternatively, a mitigation is to measure the asset change right before and after the asset-transferring routines",
            "**[Splidge (Reality Cards) acknowledged](https://github.com/code-423n4/2021-08-realitycards-findings/issues/58#issuecomment-906322667):**",
            " > The issue that [keeps on giving..](https://github.com/code-423n4/2021-06-realitycards-findings/issues/152)",
            ">",
            "> ![takemymoney](https://user-images.githubusercontent.com/73956628/130954991-f6f29f54-926f-4e68-b4cb-f73ed1dc3c95.jpg)",
            ">"
        ]
    }
}